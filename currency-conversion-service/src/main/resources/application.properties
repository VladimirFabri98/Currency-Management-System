spring.application.name = currency-conversion
server.port = 8200

#Standard retry settings
resilience4j.retry.instances.default.wait-duration=2s
resilience4j.retry.instances.default.max-attempts=10
resilience4j.retry.instances.default.retry-exceptions=org.springframework.web.client.ResourceAccessException

##Exponential backoff
resilience4j.retry.instances.exponential.wait-duration=2s
resilience4j.retry.instances.exponential.max-attempts=10
resilience4j.retry.instances.exponential.retry-exceptions=org.springframework.web.client.ResourceAccessException
resilience4j.retry.instances.exponential.enable-exponential-backoff=true
resilience4j.retry.instances.exponential.exponential-backoff-multiplier=2


## CircuitBreaker
#Minimal number of calls required for CB to calculate failure rate
resilience4j.circuitbreaker.instances.cb.minimum-number-of-calls=1
#If 5 of 10 calls are faulty - circuit breaker will transition into open state
resilience4j.circuitbreaker.instances.cb.failure-rate-threshold=50
#CB stays in open state - not allowing any calls for 10 seconds + time it takes for the next new call to the service
resilience4j.circuitbreaker.instances.cb.wait-duration-in-open-state=20s
#Once CB transitions to half-open state it will allow 4 calls to determine if the service is back up
resilience4j.circuitbreaker.instances.cb.permitted-number-of-calls-in-half-open-state=4
#This allows CB to infinetily stay in half open state until all 4 calls are completed
resilience4j.circuitbreaker.instances.cb.max-wait-duration-in-half-open-state=0
#If calls last more than 10 seconds it will count as failure, if over 50% of calls are slow CB will transition into open state
resilience4j.circuitbreaker.instances.cb.slow-call-duration-threshold=10s
resilience4j.circuitbreaker.instances.cb.slow-call-rate-threshold=50

management.endpoints.web.exposure.include=circuitbreakers,caches,chaosmonkey

#Chaos monkey configurations
spring.profiles.active=chaos-monkey
chaos.monkey.enabled=true
management.endpoint.chaosmonkey.enabled=true
chaos.monkey.watcher.rest-controller=true

#Level represent frequency of attacks, if deterministic level 1 means every call will be attacked, if not deterministic only 1
# in 10000 calls will be attacked
chaos.monkey.assaults.level=1
chaos.monkey.assaults.deterministic=true

#Enable chaos monkey latency assaults, every call will be delayed by 10-15 seconds
chaos.monkey.assaults.latency-active=false
chaos.monkey.assaults.latency-range-start=10000
chaos.monkey.assaults.latency-range-end=15000

#Enable random exceptions to occur during method calls, by default RuntimeException is thrown with message "Chaos Monkey - RuntimeException"
chaos.monkey.assaults.exceptions-active=false

#Enable chaos-monkey to shut down app
chaos.monkey.assaults.kill-application-active=false
